diff --git a/src/cmd/compile/internal/noder/lex.go b/src/cmd/compile/internal/noder/lex.go
index 60b724d154..48c608e243 100644
--- a/src/cmd/compile/internal/noder/lex.go
+++ b/src/cmd/compile/internal/noder/lex.go
@@ -115,8 +115,8 @@ func (p *noder) pragcgo(pos syntax.Pos, text string) {
                                // or "lib.a/libname.so.X"
                                n := strings.Split(f[3], "/")
                                if len(n) != 2 || !strings.HasSuffix(n[0], ".a") || (!strings.HasSuffix(n[1], ".o") && !strings.Contains(n[1], ".so.")) {
-                                       p.error(syntax.Error{Pos: pos, Msg: `usage: //go:cgo_import_dynamic local [remote ["lib.a/object.o"]]`})
-                                       return
+//                                     p.error(syntax.Error{Pos: pos, Msg: `usage: //go:cgo_import_dynamic local [remote ["lib.a/object.o"]]`})
+//                                     return
                                }
                        }
                default:



diff --git a/src/cmd/dist/build.go b/src/cmd/dist/build.go
index acf38e3785..f8f16a934f 100644
--- a/src/cmd/dist/build.go
+++ b/src/cmd/dist/build.go
@@ -1507,6 +1507,7 @@ func goCmd(goBinary string, cmd string, args ...string) {
        if gohostos == "plan9" && os.Getenv("sysname") == "vx32" {
                goCmd = append(goCmd, "-p=1")
        }
+       goCmd = append(goCmd, "-p=1")  //IBMi

        run(workdir, ShowOutput|CheckExit, append(goCmd, args...)...)
 }




diff --git a/src/cmd/dist/util.go b/src/cmd/dist/util.go
index e99375f538..659f35bca5 100644
--- a/src/cmd/dist/util.go
+++ b/src/cmd/dist/util.go
@@ -114,7 +114,7 @@ func run(dir string, mode int, cmd ...string) string {
        return string(data)
 }

-var maxbg = 4 /* maximum number of jobs to run at once */
+var maxbg = 1 /* maximum number of jobs to run at once */

 var (
        bgwork = make(chan func(), 1e5)
@@ -261,6 +261,17 @@ func xmkdir(p string) {
        if err != nil {
                fatalf("%v", err)
        }
+       os.Mkdir(p, 0777)
+       os.Mkdir(p, 0777)
+       os.Mkdir(p, 0777)
+       os.Mkdir(p, 0777)
+       os.Mkdir(p, 0777)
+       os.Mkdir(p, 0777)
+       os.Mkdir(p, 0777)
+       os.Mkdir(p, 0777)
+       os.Mkdir(p, 0777)
+       os.Mkdir(p, 0777)
+       os.Mkdir(p, 0777)
 }

 // xmkdirall creates the directory p and its parents, as needed.
@@ -269,6 +280,17 @@ func xmkdirall(p string) {
        if err != nil {
                fatalf("%v", err)
        }
+       os.MkdirAll(p, 0777)
+       os.MkdirAll(p, 0777)
+       os.MkdirAll(p, 0777)
+       os.MkdirAll(p, 0777)
+       os.MkdirAll(p, 0777)
+       os.MkdirAll(p, 0777)
+       os.MkdirAll(p, 0777)
+       os.MkdirAll(p, 0777)
+       os.MkdirAll(p, 0777)
+       os.MkdirAll(p, 0777)
+       os.MkdirAll(p, 0777)
 }

 // xremove removes the file p.










diff --git a/src/runtime/lfstack_64bit.go b/src/runtime/lfstack_64bit.go
index 4812dd1156..670932e792 100644
--- a/src/runtime/lfstack_64bit.go
+++ b/src/runtime/lfstack_64bit.go
@@ -53,7 +53,8 @@ func lfstackUnpack(val uint64) *lfnode {
                return (*lfnode)(unsafe.Pointer(uintptr(int64(val) >> cntBits << 3)))
        }
        if GOARCH == "ppc64" && GOOS == "aix" {
-               return (*lfnode)(unsafe.Pointer(uintptr((val >> aixCntBits << 3) | 0xa<<56)))
+//             return (*lfnode)(unsafe.Pointer(uintptr((val >> aixCntBits << 3) | 0xa<<56)))
+               return (*lfnode)(unsafe.Pointer(uintptr((val >> aixCntBits << 3) | 0x7<<56)))
        }
        return (*lfnode)(unsafe.Pointer(uintptr(val >> cntBits << 3)))
 }











diff --git a/src/runtime/malloc.go b/src/runtime/malloc.go
index 8435f96532..664c94c872 100644
--- a/src/runtime/malloc.go
+++ b/src/runtime/malloc.go
@@ -302,7 +302,8 @@ const (
        //
        // On other platforms, the user address space is contiguous
        // and starts at 0, so no offset is necessary.
-       arenaBaseOffset = 0xffff800000000000*sys.GoarchAmd64 + 0x0a00000000000000*sys.GoosAix
+//     arenaBaseOffset = 0xffff800000000000*sys.GoarchAmd64 + 0x0a00000000000000*sys.GoosAix
+       arenaBaseOffset = 0xffff800000000000*sys.GoarchAmd64 + 0x0700000000000000*sys.GoosAix
        // A typed version of this constant that will make it into DWARF (for viewcore).
        arenaBaseOffsetUintptr = uintptr(arenaBaseOffset)

@@ -539,7 +540,8 @@ func mallocinit() {
                                        // to avoid collisions with others mmaps done by non-go programs.
                                        continue
                                }
-                               p = uintptr(i)<<40 | uintptrMask&(0xa0<<52)
+//                             p = uintptr(i)<<40 | uintptrMask&(0xa0<<52)
+                               p = uintptr(i)<<40 | uintptrMask&(0x70<<52)
                        default:
                                p = uintptr(i)<<40 | uintptrMask&(0x00c0<<32)
                        }



